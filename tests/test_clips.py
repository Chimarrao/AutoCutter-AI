#!/usr/bin/env python3
"""
Testes para gera√ß√£o de clipes de v√≠deo
"""
import sys
import os
import tempfile
import json

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def test_clip_generation_validation():
    """Testar valida√ß√£o de entrada para gera√ß√£o de clipes"""
    print("=== TESTANDO VALIDA√á√ÉO DE GERA√á√ÉO DE CLIPES ===")

    try:
        # Simular valida√ß√£o de entrada como no generateClips.py
        test_cases = [
            # (video_path, output_dir, min_clips, max_clips, expected_valid)
            ("video.mp4", "output", 3, 8, True),      # V√°lido
            ("", "output", 3, 8, False),              # V√≠deo vazio
            ("video.mp4", "", 3, 8, False),           # Output vazio
            ("video.mp4", "output", 0, 8, False),     # Min clips inv√°lido
            ("video.mp4", "output", 3, 2, False),     # Max < min
            ("video.mp4", "output", 15, 20, True),    # Valores altos v√°lidos
        ]

        def validate_inputs(video_path, output_dir, min_clips, max_clips):
            """Simular valida√ß√£o do generateClips.py"""
            if not video_path:
                return False, "Caminho do v√≠deo n√£o fornecido"

            if not os.path.exists(video_path):
                return False, "Arquivo de v√≠deo n√£o existe"

            if not output_dir:
                return False, "Diret√≥rio de sa√≠da n√£o fornecido"

            if min_clips < 1:
                return False, "N√∫mero m√≠nimo de clipes deve ser pelo menos 1"

            if max_clips < min_clips:
                return False, "N√∫mero m√°ximo de clipes deve ser maior que o m√≠nimo"

            return True, "OK"

        # Criar arquivo de v√≠deo tempor√°rio para teste
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_video:
            temp_video_path = temp_video.name

        try:
            for video_path, output_dir, min_clips, max_clips, expected_valid in test_cases:
                # Usar arquivo tempor√°rio para casos v√°lidos
                if video_path and expected_valid:
                    test_video_path = temp_video_path
                else:
                    test_video_path = video_path

                is_valid, message = validate_inputs(test_video_path, output_dir, min_clips, max_clips)

                status = "‚úÖ" if is_valid == expected_valid else "‚ùå"
                print(f"{status} {test_video_path or '(vazio)'} -> {message}")

                if is_valid != expected_valid:
                    print(f"   Esperado: {'V√°lido' if expected_valid else 'Inv√°lido'}, Obtido: {'V√°lido' if is_valid else 'Inv√°lido'}")

        finally:
            # Limpar arquivo tempor√°rio
            if os.path.exists(temp_video_path):
                os.unlink(temp_video_path)

        print("‚úÖ Valida√ß√£o de entrada testada")
        return True

    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_transcription_segments():
    """Testar processamento de segmentos de transcri√ß√£o"""
    print("\n=== TESTANDO PROCESSAMENTO DE TRANSCRI√á√ÉO ===")

    try:
        # Simular classe LLMClipFinder
        class MockLLMClipFinder:
            def _format_time(self, seconds):
                """Formata segundos para HH:MM:SS"""
                hours = int(seconds // 3600)
                minutes = int((seconds % 3600) // 60)
                secs = int(seconds % 60)
                return "02d"

            def format_transcript(self, transcription_segments):
                """Formata transcri√ß√£o como no c√≥digo original"""
                transcript_text = ""
                for i, segment in enumerate(transcription_segments):
                    start_time = self._format_time(segment["start"])
                    end_time = self._format_time(segment["end"])
                    transcript_text += f"[{start_time} - {end_time}] {segment['text']}\n"
                return transcript_text

        # Testar formata√ß√£o de tempo
        finder = MockLLMClipFinder()

        test_times = [
            (0, "00:00:00"),
            (65, "00:01:05"),
            (3665, "01:01:05"),
            (7323, "02:02:03"),
        ]

        print("Testando formata√ß√£o de tempo:")
        for seconds, expected in test_times:
            formatted = finder._format_time(seconds)
            status = "‚úÖ" if formatted == expected else "‚ùå"
            print(f"{status} {seconds}s -> {formatted} (esperado: {expected})")

        # Testar formata√ß√£o de transcri√ß√£o
        test_segments = [
            {"start": 0.0, "end": 5.0, "text": "Ol√° mundo"},
            {"start": 5.0, "end": 10.0, "text": "Este √© um teste"},
        ]

        transcript = finder.format_transcript(test_segments)
        expected_lines = 2
        actual_lines = len(transcript.strip().split('\n'))

        status = "‚úÖ" if actual_lines == expected_lines else "‚ùå"
        print(f"{status} Formata√ß√£o de transcri√ß√£o: {actual_lines} linhas (esperado: {expected_lines})")

        print("‚úÖ Processamento de transcri√ß√£o testado")
        return True

    except Exception as e:
        print(f"‚ùå Erro no processamento de transcri√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_clip_detection_prompt():
    """Testar gera√ß√£o de prompts para detec√ß√£o de clipes"""
    print("\n=== TESTANDO PROMPTS DE DETEC√á√ÉO ===")

    try:
        # Importar fun√ß√£o de prompt
        from prompt_corte_youtube import get_clip_detection_prompt

        # Testar com dados de exemplo
        test_transcript = """
        [00:00:00 - 00:00:05] Ol√° pessoal, bem vindos ao canal!
        [00:00:05 - 00:00:15] Hoje vamos falar sobre tecnologia
        [00:00:15 - 00:00:25] Este √© um t√≥pico muito interessante
        [00:00:25 - 00:00:35] Vamos ver algumas demonstra√ß√µes
        """

        prompt = get_clip_detection_prompt(test_transcript, min_clips=3, max_clips=5)

        # Verificar se prompt cont√©m elementos essenciais
        required_elements = [
            "transcri√ß√£o",
            "momentos interessantes",
            "clipes",
            "JSON"
        ]

        missing_elements = []
        for element in required_elements:
            if element.lower() not in prompt.lower():
                missing_elements.append(element)

        if missing_elements:
            print(f"‚ùå Elementos faltando no prompt: {missing_elements}")
            return False
        else:
            print("‚úÖ Prompt cont√©m todos os elementos necess√°rios")
            print(f"   Tamanho do prompt: {len(prompt)} caracteres")
            return True

    except ImportError:
        print("‚ö†Ô∏è M√≥dulo prompt_corte_youtube n√£o encontrado, pulando teste")
        return True
    except Exception as e:
        print(f"‚ùå Erro no teste de prompts: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_output_directory_creation():
    """Testar cria√ß√£o de diret√≥rio de sa√≠da"""
    print("\n=== TESTANDO CRIA√á√ÉO DE DIRET√ìRIO ===")

    try:
        import tempfile

        with tempfile.TemporaryDirectory() as temp_base:
            test_dirs = [
                "clips_output",
                "output/clips",
                os.path.join(temp_base, "test_clips"),
            ]

            for test_dir in test_dirs:
                try:
                    os.makedirs(test_dir, exist_ok=True)
                    if os.path.exists(test_dir) and os.path.isdir(test_dir):
                        print(f"‚úÖ Diret√≥rio criado: {test_dir}")
                    else:
                        print(f"‚ùå Falha ao criar diret√≥rio: {test_dir}")
                        return False
                except Exception as e:
                    print(f"‚ùå Erro ao criar {test_dir}: {e}")
                    return False

        print("‚úÖ Cria√ß√£o de diret√≥rio testada")
        return True

    except Exception as e:
        print(f"‚ùå Erro no teste de diret√≥rio: {e}")
        return False


if __name__ == "__main__":
    print("Testando gera√ß√£o de clipes...")

    # Executar testes
    tests = [
        ("Valida√ß√£o de Entrada", test_clip_generation_validation),
        ("Processamento de Transcri√ß√£o", test_transcription_segments),
        ("Prompts de Detec√ß√£o", test_clip_detection_prompt),
        ("Cria√ß√£o de Diret√≥rio", test_output_directory_creation),
    ]

    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"EXECUTANDO: {test_name}")
        print('='*50)

        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå ERRO FATAL em {test_name}: {e}")
            results.append((test_name, False))

    # Resumo final
    print(f"\n{'='*50}")
    print("RESUMO DOS TESTES DE CLIPES")
    print('='*50)

    passed = 0
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status}: {test_name}")
        if result:
            passed += 1

    print(f"\nResultado Final: {passed}/{total} testes passaram")

    if passed == total:
        print("\nüéâ Todos os testes de clipes passaram!")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} teste(s) falharam.")